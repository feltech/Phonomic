{
  "name": "fastcgi-stream",
  "version": "0.1.1",
  "description": "Fast FastCGI Stream wrapper for reading/writing FCGI records.",
  "keywords": [
    "fcgi",
    "fastcgi"
  ],
  "author": {
    "name": "Sam Day",
    "email": "sam.c.day@gmail.com"
  },
  "main": "./lib/index.js",
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "vows": ">= 0.5.6",
    "bufferlist": ">= 0.0.6",
    "stream-buffers": ">= 0.2.1",
    "duplex-stream": ">= 0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/samcday/node-fastcgi-stream.git"
  },
  "scripts": {
    "test": "vows test/fastcgi.test.js --spec"
  },
  "readme": "# FastCGI Stream Lib\r\n\r\nRead/write FastCGI records from a stream. Like a boss.\r\n\r\n# Installation\r\n\r\nnpm.\r\n\r\n\tnpm install fastcgi-stream\r\n\r\n# Usage\r\n\r\nInclude the package.\r\n\r\n\tvar fastcgi = require(\"fastcgi-stream\");\r\n\r\nThe FastCGI stream library has two main pieces, the `FastCGIStream` itself and the records that can be sent and received on it.\r\n\t\r\nThe `FastCGIStream` wraps an existing `Stream` to send/receive FCGI records on. 99% of the time this is going to be a `net.Socket`.\r\n\r\n\tvar fcgiStream = new fastcgi.FastCGIStream(mySocket);\r\n\t\r\nSend records through it.\r\n\r\n\tfcgiStream.writeRecord(requestId, new fastcgi.records.BeginRequest(\r\n\t\tfastcgi.records.BeginRequest.roles.RESPONDER,\r\n\t\tfastcgi.records.BeginRequest.flags.KEEP_CONN\r\n\t));\r\n\t\r\nReceive records from it.\r\n\r\n\tfcgiStream.on(\"record\", function(requestId, record) {\r\n\t\tif(requestId == fastcgi.constants.NULL_REQUEST_ID) {\r\n\t\t\t// Management record.\r\n\t\t}\r\n\t\telse {\r\n\t\t\tswitch(record.TYPE) {\r\n\t\t\t\tcase fastcgi.records.BeginRequest.TYPE: {\r\n\t\t\t\t\t// Request beginning. What role are we being asked to fulfill?\r\n\t\t\t\t\tif(record.role == fastcgi.records.BeginRequest.role.RESPONDER) {\r\n\t\t\t\t\t\t// Etc...\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n# Records\r\n\r\nAll record objects live in the `fastcgi.records` namespace. Each record will now be listed. The listing will detail the constructor and parameters each record contains.\r\n\r\nConstructor args are never mandatory, you can pass as many or as few arguments as you like.\r\n\r\n### BeginRequest\r\n\r\n\tvar record = new fastcgi.records.BeginRequest(role, flags);\r\n\t\r\n* `.role` - the role being requested. Possible roles as follows:\r\n\t* `fastcgi.records.BeginRequest.roles.RESPONDER`\r\n\t* `fastcgi.records.BeginRequest.roles.AUTHORIZER`\r\n\t* `fastcgi.records.BeginRequest.roles.FILTER`\r\n* `.flags` - additional flags for the request. There is only one in the specification:\r\n\t* `fastcgi.records.BeginRequest.flags.KEEP_CONN`\r\n\t\r\n### AbortRequest\r\n\r\n\tvar record = new fastcgi.records.AbortRequest();\r\n\t\r\n### EndRequest\r\n\r\n\tvar record = new fastcgi.records.EndRequest(appStatus, protocolStatus);\r\n\t\r\n* `.appStatus` - application return status code\r\n* `.protocolStatus` - protocol return status code, can be one of the following:\r\n\t* `fastcgi.records.EndRequest.protocolStatus.REQUEST_COMPLETE`\r\n\t* `fastcgi.records.EndRequest.protocolStatus.CANT_MPX_CONN`\r\n\t* `fastcgi.records.EndRequest.protocolStatus.OVERLOADED` \r\n\t* `fastcgi.records.EndRequest.protocolStatus.UNKNOWN_ROLE`\r\n\t\r\n### Params\r\n\r\n\tvar params = [\r\n\t\t[\"Name\", \"Value\"],\r\n\t\t[\"AnotherName\", \"AnotherValue\"]\r\n\t];\r\n\t\r\n\t// Params is optional.\r\n\tvar record = new fastcgi.records.Params(params);\r\n\t\r\n`.params` - an array of name/value array pairs\r\n\r\n### StdIn/StdOut/StdErr/Data\r\n\r\nAll of these records take the same constructor and have the same properties.\r\n\r\n\tvar body = \"String\";\r\n\tvar record = new fastcgi.records.StdIn(body);\r\n\r\n\t// .. or ..\r\n\r\n\tvar body = new Buffer(\"Contents.\");\r\n\tvar record = new fastcgi.records.StdIn(body);\r\n\t\r\n### GetValues\r\n\r\n\tvar values = [\"Name\", \"AnotherName\"];\r\n\tvar record = new fastcgi.records.GetValues(values);\r\n\t\r\n`.values` - array of values being requested\r\n\r\n### GetValuesResult\r\n\r\n\tvar result = [\r\n\t\t[\"Name\", \"Value\"],\r\n\t\t[\"AnotherName\", \"AnotherValue\"]\r\n\t];\r\n\r\n\tvar record = new fastcgi.records.GetValuesResult(result);\r\n\t\r\n`.result` - array of name/value pairs representing the result.\r\n\r\n### UnknownType\r\n\r\n\tvar record = new fastcgi.records.UnknownType(type);\r\n\t\r\n`.type` - the type of record that was not recognized.\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/samcday/node-fastcgi-stream/issues"
  },
  "_id": "fastcgi-stream@0.1.1",
  "_from": "fastcgi-stream@"
}
