// Generated by CoffeeScript 1.6.3
define(['underscore', 'jquery', 'brite', 'utils/logger', 'templates/WordEdit', 'templates/WordEditLangList', 'models/WordModel', 'lib/jquery/jquery.transit', 'lib/jquery/bootstrap'], function(_, $, brite, log, editTmpl, langTmpl, WordModel) {
  var P, transitTime;
  transitTime = 200;
  P = function() {
    return $.Deferred().promise();
  };
  return brite.registerView('WordEditView', {
    m2vm: function(wordModel, wordView) {
      var _this = this;
      if (wordView == null) {
        wordView = {};
      }
      return brite.dao("Language").list().then(function(languages) {
        return _(wordModel).chain().clone().extend({
          Languages: _(wordModel.Languages.split('\t')).chain().compact().map(function(id) {
            return parseInt(id);
          }).map(function(id) {
            return _(languages).findWhere({
              ID: id
            });
          }).value()
        }).value();
      });
    },
    vm2m: function(wordView, wordModel) {
      if (wordModel == null) {
        wordModel = {};
      }
      return P().then(function() {
        return _(wordModel).extend({
          Languages: _(wordView.Languages).map(function(lang) {
            return lang.ID;
          }).join("\t"),
          Roman: wordView.Roman,
          Native: wordView.Roman,
          Phonetic: wordView.Roman,
          captcha: $('#captcha').val()
        });
      });
    },
    create: function(wordModel) {
      var _this = this;
      this.wordModel = wordModel;
      this.alertCount = 0;
      return this.m2vm(this.wordModel).then(function(wordView) {
        _this.wordView = wordView;
        return {
          word: wordView
        };
      }).then(function(tmplParams) {
        return brite.dao("Language").list().then(function(languages) {
          return _(tmplParams).extend({
            languages: languages
          });
        });
      }).then(function(tmplParams) {
        return $.get('/captcha').then(function(captcha) {
          return _(tmplParams).extend({
            captcha: captcha
          });
        });
      }).then(function(tmplParams) {
        return editTmpl.render(tmplParams, {
          langList: langTmpl
        });
      });
    },
    init: function() {
      this.$el.hide();
    },
    destroy: function() {
      return this.$el.parent().height('auto');
    },
    postDisplay: function() {
      var sourceY,
        _this = this;
      sourceY = $(window).height() + $(window).scrollTop() + this.$el.parent().height();
      if (log('trace')) {
        console.log("WordEditView transitioning from y=" + sourceY);
      }
      this.$el.parent().height(this.$el.height());
      return $.Deferred(function(defer) {
        return _this.$el.css({
          y: sourceY,
          opacity: 0.5
        }).show().transition({
          y: 0,
          opacity: 1
        }, transitTime, 'snap', function() {
          return defer.resolve();
        });
      }).done(function() {
        var offset;
        offset = Math.max(_this.$el.offset().top - 100, 0);
        return $('html, body').animate({
          scrollTop: "" + offset + "px"
        }, 'slow');
      });
    },
    resolveWordLanguages: function() {
      var _this = this;
      return brite.dao("Language").list().then(function(languages) {
        return _this.word.Languages && _(_this.word.Languages.split('\t')).chain().compact().map(function(id) {
          return parseInt(id);
        }).map(function(id) {
          return _(languages).findWhere({
            ID: id
          });
        }).value();
      });
    },
    hide: function() {
      var _this = this;
      return $.Deferred(function(defer) {
        if (_this.$el && _this.$el.css('opacity') !== 0) {
          return _this.$el.transition({
            opacity: 0
          }, transitTime, function() {
            return defer.resolve(_this.$el);
          });
        } else {
          return defer.resolve(_this.$el);
        }
      });
    },
    remove: function() {
      var _this = this;
      return this.hide().then(function() {
        var _ref;
        return (_ref = _this.$el) != null ? _ref.parent().bEmpty() : void 0;
      });
    },
    showAlert: function(type, title, text) {
      var $alert;
      $alert = $('#submit-state');
      this.alertCount++;
      return this.resetAlert().then(function() {
        $alert.addClass("alert-" + type);
        $('strong', $alert).html(title);
        $('span', $alert).html(text);
        return $alert.removeClass('invisible');
      });
    },
    resetAlert: function(delay) {
      var $alert, alertCount, defer,
        _this = this;
      $alert = $('#submit-state');
      alertCount = this.alertCount;
      defer = $.Deferred().resolve();
      if (delay) {
        defer = defer.then(function() {
          return $.Deferred(function(defer) {
            return _.delay(function() {
              if ($alert.is('.invisible') || alertCount !== _this.alertCount) {
                return defer.reject();
              } else {
                return defer.resolve();
              }
            }, delay);
          });
        });
      }
      return defer.then(function() {
        return $alert.addClass('invisible').removeClass('alert-success').removeClass('alert-warning').removeClass('alert-info');
      }, function() {
        return $.Deferred().resolve();
      }).promise();
    },
    events: {
      'click; button.cancel': function(evt) {
        return this.remove();
      },
      'click; button#search-roman': function(evt) {
        return this.$el.trigger('search', {
          field: 'Roman',
          text: $('#roman').val()
        });
      },
      'click; button#search-native': function(evt) {
        return this.$el.trigger('search', {
          field: 'Native',
          text: $('#native').val()
        });
      },
      'click; button#search-phonetic': function(evt) {
        return this.$el.trigger('search', {
          field: 'Phonetic',
          text: $('#phonetic').val()
        });
      },
      'click; button#add-language': function(evt) {
        var languageID;
        languageID = $('select#languages').val();
        if (languageID) {
          this.word.Languages = _(this.word.Languages.split('\t')).union([languageID]).join('\t');
          return this.resolveWordLanguages().then(function(languages) {
            return $('#language-list').html(langTmpl.render({
              Languages: languages
            }));
          });
        }
      },
      'click; button.delete-language': function(evt) {
        var languageRef;
        languageRef = $(evt.currentTarget).bEntity('Language');
        this.word.Languages = _(this.word.Languages.split('\t')).without(languageRef.id).join('\t');
        return languageRef.$el.transition({
          'opacity': 0
        }, function() {
          return languageRef.$el.remove();
        });
      },
      'submit; #form-edit': function(evt) {
        var _this = this;
        evt.preventDefault();
        _(this.word).extend({
          Roman: _.clean($('#roman').val()),
          Native: _.clean($('#native').val()),
          Phonetic: _.clean($('#phonetic').val()),
          captcha: $('#captcha').val()
        });
        this.$el.trigger('loader', true);
        this.showAlert('info', "Sending.", "The changes are being sent to the server, please wait...").then(function() {
          var _ref;
          return brite.dao('Word')[(_ref = _this.word.ID) != null ? _ref : {
            'update': 'create'
          }](_this.word);
        }).then(function() {
          return _this.showAlert('success', "Success!", "The changes have been sucessfuly saved to the server.");
        }).always(function() {
          return _this.$el.trigger('loader', false);
        }).then(function() {
          return _this.resetAlert(5000);
        }).fail(function(xhr, error, text) {
          return _this.showAlert('warning', "Failed.", xhr.status === 401 ? "Sorry, the text you entered does not match the captcha text above, please try again." : "A server error occurred whilst trying to save your changes.");
        });
        return false;
      }
    },
    winEvents: {
      'resize': function() {
        console.log("WordEditView window size changed: " + ($(window).width()) + "x" + ($(window).height()));
        this.$el.parent().height(this.$el.height());
        return false;
      }
    },
    daoEvents: {
      'dataChange; Word': function(evt) {
        if (evt.daoEvent.action === 'create') {
          this.word = new WordModel(evt.daoEvent.result);
          return $('#word-id').html("#" + this.word.ID);
        }
      }
    }
  });
});
