// Generated by CoffeeScript 1.6.3
define(['underscore', 'jquery', 'brite', 'utils/logger', 'templates/WordEdit', 'templates/WordEditLangList', 'models/WordModel', 'lib/jquery/jquery.transit', 'lib/jquery/bootstrap'], function(_, $, brite, log, editTmpl, langTmpl, WordModel) {
  var transitTime;
  transitTime = 200;
  return brite.registerView('WordEditView', {
    create: function(word) {
      var languageDAO, wordRender,
        _this = this;
      this.word = word;
      wordRender = _.clone(this.word);
      languageDAO = brite.dao("Language");
      return languageDAO.list().then(function(languages) {
        var languageIDs, _ref;
        languageIDs = _.compact((_ref = word.Languages) != null ? _ref.split('\t') : void 0);
        languageIDs = _(languageIDs).map(function(id) {
          return parseInt(id);
        });
        wordRender.Languages = _(languageIDs).map(function(id) {
          return _(languages).findWhere({
            ID: id
          });
        });
        return editTmpl.render({
          word: wordRender,
          languages: languages
        }, {
          langList: langTmpl
        });
      });
    },
    init: function() {
      this.$el.hide();
    },
    destroy: function() {
      return this.$el.parent().height('auto');
    },
    postDisplay: function() {
      var sourceY;
      sourceY = $(window).height() + $(window).scrollTop() + this.$el.parent().height();
      if (log('trace')) {
        console.log("WordEditView transitioning from y=" + sourceY);
      }
      this.$el.parent().height(this.$el.height());
      this.$el.css({
        y: sourceY,
        opacity: 0.5
      }).show().transition({
        y: 0,
        opacity: 1
      }, transitTime, 'snap');
    },
    resolveWordLanguages: function() {
      var languageDAO,
        _this = this;
      languageDAO = brite.dao("Language");
      return languageDAO.list().then(function(languages) {
        var languageIDs, _ref;
        languageIDs = _.compact((_ref = _this.word.Languages) != null ? _ref.split('\t') : void 0);
        languageIDs = _(languageIDs).map(function(id) {
          return parseInt(id);
        });
        return _(languageIDs).map(function(id) {
          return _(languages).findWhere({
            ID: id
          });
        });
      });
    },
    hide: function() {
      var _this = this;
      return $.Deferred(function(defer) {
        if (_this.$el && _this.$el.css('opacity') !== 0) {
          return _this.$el.transition({
            opacity: 0
          }, transitTime, function() {
            return defer.resolve(_this.$el);
          });
        } else {
          return defer.resolve(_this.$el);
        }
      });
    },
    remove: function() {
      var _this = this;
      return this.hide().then(function() {
        var _ref;
        return (_ref = _this.$el) != null ? _ref.parent().bEmpty() : void 0;
      });
    },
    events: {
      'click; button.cancel': function(evt) {
        return this.remove();
      },
      'click; button#search-roman': function(evt) {
        return this.$el.trigger('search', {
          field: 'Roman',
          text: $('#roman').val()
        });
      },
      'click; button#search-native': function(evt) {
        return this.$el.trigger('search', {
          field: 'Native',
          text: $('#native').val()
        });
      },
      'click; button#search-phonetic': function(evt) {
        return this.$el.trigger('search', {
          field: 'Phonetic',
          text: $('#phonetic').val()
        });
      },
      'click; button#add-language': function(evt) {
        var languageID;
        languageID = $('select#languages').val();
        if (languageID) {
          this.word.Languages = _(this.word.Languages.split('\t')).union([languageID]).join('\t');
          return this.resolveWordLanguages().then(function(languages) {
            return $('#language-list').html(langTmpl.render({
              Languages: languages
            }));
          });
        }
      },
      'click; button.delete-language': function(evt) {
        var languageRef;
        languageRef = $(evt.currentTarget).bEntity('Language');
        this.word.Languages = _(this.word.Languages.split('\t')).without(languageRef.id).join('\t');
        return languageRef.$el.transition({
          'opacity': 0
        }, function() {
          return languageRef.$el.remove();
        });
      },
      'submit; #form-edit': function(evt) {
        var $alert, wordDAO,
          _this = this;
        evt.preventDefault();
        _(this.word).extend({
          Roman: _.clean($('#roman').val()),
          Native: _.clean($('#native').val()),
          Phonetic: _.clean($('#phonetic').val())
        });
        $alert = $('#submit-state').removeClass('alert-success').removeClass('alert-warning').addClass('alert-info');
        $('strong', $alert).html("Sending.");
        $('span', $alert).html("The changes are being sent to the server, please wait...");
        $alert.removeClass('invisible').css({
          opacity: 1
        });
        wordDAO = brite.dao('Word');
        wordDAO[this.word.ID ? 'update' : 'create'](this.word).done(function() {
          $alert = $('#submit-state').addClass('alert-success').removeClass('alert-warning').removeClass('alert-info');
          $('strong', $alert).html("Success!");
          $('span', $alert).html("The changes have been sucessfuly saved to the server.");
          return $alert.transition({
            opacity: 0,
            delay: 3000
          }, function() {
            return $alert.addClass('invisible');
          });
        }).fail(function() {
          $alert = $('#submit-state').removeClass('alert-success').addClass('alert-warning').removeClass('alert-info');
          $('strong', $alert).html("Failed.");
          $('span', $alert).html("Could not save changes to the server.");
          return $alert.removeClass('invisible');
        });
        return false;
      }
    },
    winEvents: {
      'resize': function() {
        console.log("WordEditView window size changed: " + ($(window).width()) + "x" + ($(window).height()));
        this.$el.parent().height(this.$el.height());
        return false;
      }
    },
    daoEvents: {
      'dataChange; Word': function(evt) {
        if (evt.daoEvent.action === 'create') {
          this.word = new WordModel(evt.daoEvent.result);
          return $('#word-id').html("#" + this.word.ID);
        }
      }
    }
  });
});
