// Generated by CoffeeScript 1.6.3
var Database, WordDAO, squel;

Database = require('../Database');

squel = require('squel');

module.exports = WordDAO = (function() {
  function WordDAO() {}

  WordDAO.prototype.create = function(data) {
    var sql;
    sql = squel.insert().into('Words').set('Roman', data.Roman || "").set('Native', data.Native).set('Phonetic', data.Phonetic || "").set('Languages', data.Languages || "").toString();
    return Database.Instance().query(sql).then(function(result) {
      sql = squel.select().from('Words').field('ID').field('Roman').field('Native').field('Phonetic').field('Languages').where("ID = " + result.insertId).limit(1).toString();
      return Database.Instance().query(sql);
    }).then(function(result) {
      console.log("WordDAO.create. " + (JSON.stringify(result)));
      return result != null ? result[0] : void 0;
    });
  };

  WordDAO.prototype.get = function() {};

  WordDAO.prototype.update = function(data) {
    var sql;
    sql = squel.update().table('Words').set('Roman', data.Roman || "").set('Native', data.Native).set('Phonetic', data.Phonetic || "").set('Languages', data.Languages || "").where("ID = " + data.ID).toString();
    return Database.Instance().query(sql).then(function() {
      sql = squel.select().from('Words').field('ID').field('Roman').field('Native').field('Phonetic').field('Languages').where("ID = " + data.ID).limit(1).toString();
      return Database.Instance().query(sql);
    }).then(function(result) {
      console.log("WordDAO.update. " + (JSON.stringify(result)));
      return result != null ? result[0] : void 0;
    });
  };

  WordDAO.prototype.remove = function() {};

  WordDAO.prototype.list = function(field, value) {
    var sql;
    value = unescape(value);
    sql = squel.select().from('Words').field('ID').field('Roman').field('Native').field('Phonetic').field('Languages');
    switch (field) {
      case 'Roman':
        sql.field("levenshtein(LOWER(Roman), LOWER('" + value + "')) AS Dist").where("levenshtein(LOWER(Roman), LOWER('" + value + "')) < CHAR_LENGTH('" + value + "')");
        break;
      case 'Native':
        sql.field("levenshtein(LOWER(Native), LOWER('" + value + "')) AS Dist").where("levenshtein(LOWER(Native), LOWER('" + value + "')) < CHAR_LENGTH('" + value + "')");
        break;
      case 'Phonetic':
        sql.field("levenshtein_utf(Phonetic, '" + value + "') AS Dist").where("levenshtein_utf(Phonetic, '" + value + "') < " + (value != null ? value.length : void 0));
        break;
      default:
        sql.field("levenshtein(LOWER(Roman), LOWER('" + value + "')) AS Dist").where("levenshtein(LOWER(Roman), LOWER('" + value + "')) < CHAR_LENGTH('" + value + "')");
    }
    sql = sql.order('Dist').limit(100).toString();
    return Database.Instance().query(sql);
  };

  return WordDAO;

})();
